@page "/rounds"
@inject HttpClient http
@inject NavigationManager navigation

@if (@rounds == null)
{
    <div>Loading data...ONE</div>
}
else {
<div class="content-container">
    <ListHeader Title="Rounds"
                HandleAdd="@AddNewRound"
                HandleRefresh="@HandleRefresh"
                RoutePath="/rounds" />
    <div class="columns is-multiline is-variable">
        <div class="column is-8">
            <RoundList ErrorMessage="@errorMessage"
                         Rounds="@rounds"
                         SelectRound="@SelectRound"
                         DeleteRound="@DeleteRound" />
        </div>
    </div>

    <ModalYesNo Message="@modalMessage"
                    OnNo="@CloseModal"
                OnYes="@DeleteFromModal"
                Show="@showModal"/>
</div>
}

@code {
    private string errorMessage = "";
    private IEnumerable<Round> rounds;
    private Round roundToDelete;
    private bool showModal;
    private string modalMessage = "";

    protected override async Task OnInitializedAsync()
    {
       rounds = await http.GetFromJsonAsync<IEnumerable<Round>>("api/rounds");
    }

    private void AddNewRound()
    {
        navigation.NavigateTo("/round/0");
    }

    private async Task HandleRefresh()
    {
       rounds = await http.GetFromJsonAsync<IEnumerable<Round>>("api/rounds");
    }

        private void SelectRound(Round round)
    {
        navigation.NavigateTo($"/round/{round.Id}");
    }

    private void DeleteRound(Round round)
    {
        roundToDelete = round;
        showModal = true;
        modalMessage = $"Would you like to delete {roundToDelete.Name}";
    }

    private void CloseModal()
    {
        roundToDelete = null;
        showModal = false;
    }

    private async Task DeleteFromModal()
    {
        await http.DeleteAsync($"api/rounds/{roundToDelete.Id}");
        await HandleRefresh();
        roundToDelete = null;
        showModal = false;
    }


}